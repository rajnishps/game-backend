model Players {
  playerID                String                    @id @default(cuid())
  name                    String
  tgID                    String                    @unique
  tgFirstName             String
  tgLastName              String
  tgUsername              String                    @unique
  tgPhotoUrl              String
  userLanguage            String
  registrationIp          String
  agent                   Agents                    @relation(fields: [agentID], references: [agentID])
  agentID                 Int
  cdate                   DateTime                  @default(now())
  udate                   DateTime                  @updatedAt
  enabled                 Boolean
  registrationDate        String
  playerLoginLogs         PlayerLoginLogs[]
  currentActivePlayers    CurrentActivePlayers[]
  gameHistory             GameHistory[]
  manualAdjustments       ManualAdjustments[]
  playerWallets           PlayerWallets[]
  walletRequests          WalletRequests[]
  depositTransactions     DepositTransactions[]
  withdrawalTransactions  WithdrawalTransactions[]
  transferInTransactions  TransferInTransactions[]
  transferOutTransactions TransferOutTransactions[]
}

model Admins {
  adminID           Int                 @id @default(autoincrement())
  adminName         String
  adminPassword     String
  adminRoles        AdminRoles          @relation(fields: [adminRoleID], references: [adminRoleID])
  adminRoleID       Int
  createdBy         String
  cdate             DateTime            @default(now())
  udate             DateTime            @updatedAt
  enabled           Boolean
  adminLoginLogs    AdminLoginLogs[]
  manualAdjustments ManualAdjustments[]
}

model AdminRoles {
  adminRoleID       Int                 @id @default(autoincrement())
  adminRoleName     String
  enabled           Boolean
  admins            Admins[]
  adminRoleAccesses AdminRoleAccesses[]
}

model AdminAccesses {
  adminAccessID     Int                 @id @default(autoincrement())
  accessName        String
  adminRoleAccesses AdminRoleAccesses[]
}

model AdminRoleAccesses {
  adminRoles    AdminRoles    @relation(fields: [adminRoleID], references: [adminRoleID])
  adminRoleID   Int           @id
  adminAccesses AdminAccesses @relation(fields: [adminAccessID], references: [adminAccessID])
  adminAccessID Int
}

model Agents {
  agentID       Int            @id @default(autoincrement())
  agentName     String
  agentPassword String
  parentAgentID Int?
  createdBy     String
  cdate         DateTime       @default(now())
  udate         DateTime       @updatedAt
  enabled       Boolean
  players       Players[]
  agentRebates  AgentRebates[]
}

model AgentRebates {
  agentRebateID Int      @id @default(autoincrement())
  agents        Agents   @relation(fields: [agentID], references: [agentID])
  agentID       Int
  gameID        Int
  rebate        Float
  createdBy     String
  fromDate      DateTime
  thruDate      DateTime
  isActive      Boolean
}

model PlayerLoginLogs {
  players   Players  @relation(fields: [playerID], references: [playerID])
  playerID  String   @id
  ip        String
  loginTime DateTime
}

model AdminLoginLogs {
  admins    Admins   @relation(fields: [adminID], references: [adminID])
  adminID   Int      @id
  ip        String
  loginTime DateTime
}

model CurrentActivePlayers {
  players        Players  @relation(fields: [playerID], references: [playerID])
  playerID       String   @id
  lastActiveTime DateTime
}

model GameHistory {
  gameHistoryID   Int           @id @default(autoincrement())
  gameID          String
  Players         Players       @relation(fields: [playerID], references: [playerID])
  playerID        String
  iGamedesc       String
  betAmount       Float
  winAmount       Float
  transactionDate String
  cdate           DateTime      @default(now())
  gameRebates     GameRebates[]
}

model GameRebates {
  gameHistory        GameHistory @relation(fields: [gameHistoryID], references: [gameHistoryID])
  gameHistoryID      Int
  merchantID         Int
  gameID             Int         @id
  category           String
  effectiveBetAmount Float
  rebateAmount       Float
  status             String
  cdate              DateTime    @default(now())
}

model ManualAdjustments {
  manualAdjustmentID Int      @id @default(autoincrement())
  Players            Players  @relation(fields: [playerID], references: [playerID])
  playerID           String
  reason             String
  amount             Float
  admins             Admins   @relation(fields: [createdBy], references: [adminID])
  createdBy          Int
  cdate              DateTime @default(now())
}

model AllOwRequests {
  allOwRequestID Int      @id @default(autoincrement())
  request        String
  cdate          DateTime @default(now())
}

model PlayerWallets {
  playerWalletID Int      @id @default(autoincrement())
  Players        Players  @relation(fields: [playerID], references: [playerID])
  playerID       String
  currency       String
  amount         Float
  frozenAmount   Float
  cdate          DateTime @default(now())
  udate          DateTime @updatedAt
}

model WalletRequests {
  walletRequestID    Int     @id @default(autoincrement())
  tID                String
  type               String
  Players            Players @relation(fields: [playerID], references: [playerID])
  playerID           String
  currency           String
  amount             String
  iGameID            String
  iExtparam          String
  iRollback          String
  iGamedesc          String
  iActionID          String
  iReferenceActionID String
  roundStart         Boolean
  roundEnded         Boolean
  gameExtra          String
  subtype            String
  jackpotWin         Int
  hmac               String
  response           String
}

model AdminBankAccounts {
  adminBankAccountID     Int                      @id @default(autoincrement())
  bankName               String
  accountNumber          String
  holderName             String
  enabled                Boolean
  method                 String
  depositTransactions    DepositTransactions[]
  withdrawalTransactions WithdrawalTransactions[]
}

model DepositTransactions {
  depositTransactionID Int               @id @default(autoincrement())
  players              Players           @relation(fields: [playerID], references: [playerID])
  playerID             String
  amount               Float
  currency             String
  requestTime          DateTime
  processTime          DateTime
  processedBy          String
  transactionDate      String
  status               String
  adminBankAccounts    AdminBankAccounts @relation(fields: [adminBankAccountID], references: [adminBankAccountID])
  adminBankAccountID   Int
}

model WithdrawalTransactions {
  withdrawalTransactionID Int               @id @default(autoincrement())
  players                 Players           @relation(fields: [playerID], references: [playerID])
  playerID                String
  amount                  Float
  currency                String
  requestTime             DateTime
  processTime             DateTime
  processedBy             String
  transactionDate         String
  status                  String
  adminBankAccounts       AdminBankAccounts @relation(fields: [adminBankAccountID], references: [adminBankAccountID])
  adminBankAccountID      Int
}

model TransferInTransactions {
  transferInTransactionID Int      @id @default(autoincrement())
  players                 Players  @relation(fields: [playerID], references: [playerID])
  playerID                String
  amount                  Float
  currency                String
  requestTime             DateTime
  processTime             DateTime
  processedBy             String
  transactionDate         String
  status                  String
  counterpartPlatform     String
  counterpartUsername     String
}

model TransferOutTransactions {
  transferOutTransactionID Int      @id @default(autoincrement())
  players                  Players  @relation(fields: [playerID], references: [playerID])
  playerID                 String
  amount                   Float
  currency                 String
  requestTime              DateTime
  processTime              DateTime
  processedBy              String
  transactionDate          String
  status                   String
  counterpartPlatform      String
  counterpartUsername      String
}
